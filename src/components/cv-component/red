{const counterVariable = useSelector(state => state.counterReducer);
    const dispatch = useDispatch(); /////
    const [mousePosition, setMousePosition] = useState(null);
    const [test, setTest] = useState(null);
    const [mouse, setMouse] = useState(null);
    const mouseMouve = event => setMousePosition(event.pageX);
    let tesT;
    ///////////////

    const target = useRef();
    const transition = useRef();
    /*    const test = e => {
        transition.current.setAttribute(
            "style",
            `transform: translateX(-${e.clientX}px)`,
        );
    }; */
    ///////////////
    const [state, toggle] = useState(true);
    const {x} = useSpring({
        from: {x: 0},

        config: {duration: 1000},
    });

    /////

    const slow = {mass: 50, tension: 400, friction: 300};
    const trans = x => `translateX(-${x}px)`;
    const [trail, set] = useTrail(1, () => ({
        xy: [0, 0],
        config: i => slow,
    }));
    
    /*      <div className={"background-text"}>
                    {trail.map((props, index) => (
                        <P
                            key={index}
                            style={{transform: props.xy.interpolate(trans)}}
                        />
                    ))}
                    <div className={"bottom-div"}></div>
                </div> */}





/* 

            p {

                padding: 0px;
                margin: 0px;
                text-shadow: 0 0 0 #fff, 0px 0 0 rgba(205, 133, 63, 0.3), 0px -1px 1px #fff;
            }


            .bottom-div {
                height: 42%;
                width: inherit;
                position: inherit;
                background: linear-gradient(to top, #000, rgba(0, 0, 0, 1) 20%, 75%, rgba(0, 0, 0, 0.6) 25%);
                bottom: 0%;

            }

        }

        .background-text::before {
            content: '';
            position: absolute;
            background-image: linear-gradient(to bottom, rgb(205, 133, 63) 0%, rgb(250, 250, 210) 100%);
            padding-top: 1px;
            width: 100%;


        }

        .background-text::after {
            content: '';
            position: absolute;
            bottom: 0%;
            background-image: linear-gradient(to bottom, rgb(205, 133, 63) 0%, rgb(250, 250, 210) 100%);
            padding-top: 1px;
            width: 100%;


*/


    padding: 0px;
    margin: 0px;
    font-size: 10px;

    .container {

        display: flex;
        background-color: red;
        transform: translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotateX(0deg) rotateY(0deg) rotateZ(0deg) skew(0deg, 0deg);
        transform-style: preserve-3d;
        transform: perspective(1500px);
        opacity: 1;
        top: 0px;
        right: 0px;
        bottom: 0px;
        overflow: hidden;


        .left-item {
            left: 80vw;
            right: auto;
            z-index: 99;
            overflow: hidden;
            width: 100%;
            max-width: 30vw;
            padding-right: 30%;
            padding-left: 0%;
            background-color: red;
            opacity: .5;
        }

        .background-text {
            position: absolute;
            top: 50%;
            ///transform: translateY(-50%);
            height: 140px;
            width: 100vw;
            font-weight: bold;
            white-space: nowrap;
            padding-bottom: 3%;
            background-color: red;
            font-size: 14em;
        }

    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    import React, {Fragment, useRef, useEffect, useState} from "react";
import {useSelector, useDispatch} from "react-redux";
import {increment, decrement} from "./../actions/actions";
import {useSpring, animated, useTrail} from "react-spring";

import mousePosition from "./cv-component/hook";
import Navbar from "../nav-bar";
import Text from "../components/cv-component/text";
import Footer from "../footer";
import P from "./cv-component/p";
function Cv() {
    const [state, toggle] = useState(true);
    const {x} = useSpring({
        from: {x: 0},
        //   config: {mass: 3000, tension: 900, friction: 300},
    });
    const {xbis} = useSpring({
        from: {xbis: 0},
        //  config: {duration: 7000},
    });

    const slow = {mass: 50, tension: 400, friction: 300};
    const trans = x => `translateX(-${x}px)`;
    const transTwo = xbis => `translateX(-${xbis}px)`;
    const [trail, set] = useTrail(1, () => ({
        xy: [0],
        xbis: [0],
        // config: i => slow,
    }));
    return (
        <Fragment>
            <div
                className={"container"}
                onMouseMove={e => set({xy: [e.clientX], xbis: [e.clientX]})}>
                <div className={"left-item"}>
                    <div className={"text-left"}>
                        {trail.map((props, index) => (
                            <P
                                key={index}
                                style={{transform: props.xy.interpolate(trans)}}
                            />
                        ))}
                        {trail.map((props, index) => (
                            <P
                  
                                key={index}
                                style={{
                                    transform: props.xbis.interpolate(transTwo),
                                }}
                            />
                        ))}
                    </div>
                </div>

                <div className={"background-text"}>
                    {trail.map((props, index) => (
                        <P
                            key={index}
                            style={{transform: props.xy.interpolate(trans)}}
                        />
                    ))}
                </div>
                <div className={"right-item"}>
                    <div className={"text-right"}>
                        {trail.map((props, index) => (
                            <P
                                key={index}
                                style={{transform: props.xy.interpolate(trans)}}
                            />
                        ))}
                    </div>
                </div>
            </div>
        </Fragment>
    );
}

export default Cv;
